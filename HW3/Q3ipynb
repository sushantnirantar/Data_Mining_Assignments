{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.6.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb\n\n#in Kaggle, File -> Add or upload data -> search for credit card\n#note about the folder: ../input/creditcard\n#change the folder if you have data in a different folder\ndata = pd.read_csv(\"../input/creditcard/creditcard.csv\")\n#data.head()\ndata.describe()","metadata":{"_uuid":"77872d05-03df-4bfa-a0df-841c7db7a4c2","_cell_guid":"cd90f087-5bb3-4a68-86db-cd5eb59a71dc","execution":{"iopub.status.busy":"2021-10-11T02:59:25.169949Z","iopub.execute_input":"2021-10-11T02:59:25.170332Z","iopub.status.idle":"2021-10-11T02:59:28.879090Z","shell.execute_reply.started":"2021-10-11T02:59:25.170281Z","shell.execute_reply":"2021-10-11T02:59:28.877996Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"code","source":"#check if there are missing data\ndata.isnull().any().any()\n\n#change 'Class' dtype to \"bool\"\ndata['Class'] = data['Class'].astype('bool')","metadata":{"_uuid":"d2a4adf6-82b0-4f17-804a-97e24fc3797f","_cell_guid":"a4ab5586-fc8a-4977-ae79-4b3348220710","execution":{"iopub.status.busy":"2021-10-11T02:59:28.881085Z","iopub.execute_input":"2021-10-11T02:59:28.881351Z","iopub.status.idle":"2021-10-11T02:59:28.904837Z","shell.execute_reply.started":"2021-10-11T02:59:28.881306Z","shell.execute_reply":"2021-10-11T02:59:28.903952Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"code","source":"class_zero = data.Class.value_counts().values[0]\nclass_one = data.Class.value_counts().values[1]\nprint(data[\"Class\"].value_counts())","metadata":{"_uuid":"caf8e04a-c2a9-473c-aee6-dd88b51c0ca0","_cell_guid":"34d9a62e-9419-4991-82a5-06294371d04d","execution":{"iopub.status.busy":"2021-10-11T02:59:28.906276Z","iopub.execute_input":"2021-10-11T02:59:28.906533Z","iopub.status.idle":"2021-10-11T02:59:28.923818Z","shell.execute_reply.started":"2021-10-11T02:59:28.906491Z","shell.execute_reply":"2021-10-11T02:59:28.922802Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"sb.barplot(x=data.Class.value_counts().index.values, y=data.Class.value_counts().values)\nplt.title(\"Class distribution\")","metadata":{"_uuid":"a2780265-20eb-4b1a-901d-5410213a3da3","_cell_guid":"669bb12b-813e-4733-85fb-694b7830973f","execution":{"iopub.status.busy":"2021-10-11T02:59:28.925298Z","iopub.execute_input":"2021-10-11T02:59:28.925587Z","iopub.status.idle":"2021-10-11T02:59:29.162925Z","shell.execute_reply.started":"2021-10-11T02:59:28.925519Z","shell.execute_reply":"2021-10-11T02:59:29.161389Z"},"trusted":true},"execution_count":38,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import metrics\ndata['AmountNormalized'] = StandardScaler().fit_transform(data['Amount'].values.reshape(-1, 1))\ndata['AmountNormalized'].describe()","metadata":{"_uuid":"83f53f3d-d692-417c-94a3-b6db485711e9","_cell_guid":"2e3cbf11-8402-4f1c-8262-ae1db373fd6d","execution":{"iopub.status.busy":"2021-10-11T02:59:29.165129Z","iopub.execute_input":"2021-10-11T02:59:29.165528Z","iopub.status.idle":"2021-10-11T02:59:29.209469Z","shell.execute_reply.started":"2021-10-11T02:59:29.165468Z","shell.execute_reply":"2021-10-11T02:59:29.207969Z"},"trusted":true},"execution_count":39,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{"_uuid":"b2db65a7-677c-4ae0-98f9-1cde256db83b","_cell_guid":"d325a95c-c51c-4d84-9665-1b28ec69ac02","trusted":true}},{"cell_type":"code","source":"X = data.iloc[:, data.columns != 'Class'].values\ny = data.iloc[:, data.columns == 'Class'].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","metadata":{"_uuid":"6b20b204-87b1-4c64-a5e3-2860b1127e2f","_cell_guid":"1161036b-44b2-4ee1-885d-611b811a76a6","execution":{"iopub.status.busy":"2021-10-11T02:59:29.215072Z","iopub.execute_input":"2021-10-11T02:59:29.215817Z","iopub.status.idle":"2021-10-11T02:59:29.469651Z","shell.execute_reply.started":"2021-10-11T02:59:29.215485Z","shell.execute_reply":"2021-10-11T02:59:29.468730Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"code","source":"def plot_precision_recall_curve(y_actual, y_score, model_name):\n    precision, recall, _ = metrics.precision_recall_curve(y_actual, y_score)\n    curve_data = pd.DataFrame(columns = range(0, len(precision)))\n    curve_data.loc['Precision'] = precision\n    curve_data.loc['Recall'] = recall\n    #print (curve_data)\n    plt.step(recall, precision, color='b', alpha=0.1, where='post')\n    plt.fill_between(recall, precision, step='post', alpha=0.1, color='b')\n    plt.title('Precision Recall Curve for {} Model'.format(model_name))\n    plt.xlabel('Recall')\n    plt.ylabel('Precision')\n    plt.xlim([0, 1.05])\n    plt.ylim([0, 1.0])\n\ndef evaluate_model(y_actual, y_pred, y_score, model_name):\n    cm = metrics.confusion_matrix(y_actual, y_pred)\n    print ('Confusion Matrix for {} Model'.format(model_name))\n    print (cm)\n    print ('Classification Report for {} Model'.format(model_name))\n    print (metrics.classification_report(y_actual, y_pred, digits=6))\n    print ('Area under under ROC curve for {} Model'.format(model_name))\n    print (metrics.roc_auc_score(y_actual, y_score))\n    plot_precision_recall_curve(y_actual, y_score, model_name)","metadata":{"_uuid":"16b87e58-dc57-4238-9c87-800dee41058f","_cell_guid":"1489632f-0265-4aed-b9bb-4dbed79c9955","execution":{"iopub.status.busy":"2021-10-11T02:59:29.471587Z","iopub.execute_input":"2021-10-11T02:59:29.471853Z","iopub.status.idle":"2021-10-11T02:59:29.483163Z","shell.execute_reply.started":"2021-10-11T02:59:29.471801Z","shell.execute_reply":"2021-10-11T02:59:29.482488Z"},"trusted":true},"execution_count":41,"outputs":[]},{"cell_type":"markdown","source":"<h2>Euclidean</h2>\n<h4>Neighbours=5</h4>","metadata":{}},{"cell_type":"code","source":"#KNN Euclidean Neighbours = 5\nfrom sklearn.neighbors import KNeighborsClassifier\n#train\nknn = KNeighborsClassifier(n_neighbors=5, metric= 'minkowski', p=2)\nknn.fit(X_train, y_train.ravel())\n#test\ny_pred_knn = knn.predict(X_test)\ny_prob_knn = knn.predict_proba(X_test)\n\nevaluate_model(y_test, y_pred_knn, y_prob_knn[:, [1]], 'KNN (n=5)')","metadata":{"_uuid":"b629d9d3-e3b1-4a9f-ae50-e1679a0536ad","_cell_guid":"2986ed0c-383c-43fc-a6e1-2700ab9e19af","execution":{"iopub.status.busy":"2021-10-11T02:59:29.484275Z","iopub.execute_input":"2021-10-11T02:59:29.484643Z","iopub.status.idle":"2021-10-11T02:59:36.698186Z","shell.execute_reply.started":"2021-10-11T02:59:29.484601Z","shell.execute_reply":"2021-10-11T02:59:36.697155Z"},"trusted":true},"execution_count":42,"outputs":[]},{"cell_type":"markdown","source":"<h2>Manhattan</h2>\n<h4>Neighbours=5</h4>","metadata":{}},{"cell_type":"code","source":"#KNN Manhattan Neighbours = 5\nfrom sklearn.neighbors import KNeighborsClassifier\n#train\nknn = KNeighborsClassifier(n_neighbors=5, metric= 'minkowski', p=1)\nknn.fit(X_train, y_train.ravel())\n#test\ny_pred_knn = knn.predict(X_test)\ny_prob_knn = knn.predict_proba(X_test)\n\nevaluate_model(y_test, y_pred_knn, y_prob_knn[:, [1]], 'KNN (n=5)')","metadata":{"execution":{"iopub.status.busy":"2021-10-11T02:59:36.700857Z","iopub.execute_input":"2021-10-11T02:59:36.701627Z","iopub.status.idle":"2021-10-11T02:59:45.663625Z","shell.execute_reply.started":"2021-10-11T02:59:36.701538Z","shell.execute_reply":"2021-10-11T02:59:45.662489Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"markdown","source":"<h2>Minkowski Power=3</h2>\n<h4>Neighbours=5</h4>","metadata":{}},{"cell_type":"code","source":"#KNN Minkowski P = 3, Neighbours = 5\nfrom sklearn.neighbors import KNeighborsClassifier\n#train\nknn = KNeighborsClassifier(n_neighbors=5, metric= 'minkowski', p=3)\nknn.fit(X_train, y_train.ravel())\n#test\ny_pred_knn = knn.predict(X_test)\ny_prob_knn = knn.predict_proba(X_test)\n\nevaluate_model(y_test, y_pred_knn, y_prob_knn[:, [1]], 'KNN (n=5)')","metadata":{"execution":{"iopub.status.busy":"2021-10-11T02:59:45.665637Z","iopub.execute_input":"2021-10-11T02:59:45.666426Z","iopub.status.idle":"2021-10-11T03:00:21.155295Z","shell.execute_reply.started":"2021-10-11T02:59:45.666360Z","shell.execute_reply":"2021-10-11T03:00:21.153853Z"},"trusted":true},"execution_count":44,"outputs":[]},{"cell_type":"markdown","source":"<h2>Euclidean</h2>\n<h4>Neighbours=10</h4>","metadata":{}},{"cell_type":"code","source":"#KNN Distance = Euclidean , Neighbours = 10\nfrom sklearn.neighbors import KNeighborsClassifier\n#train\nknn = KNeighborsClassifier(n_neighbors=10, metric= 'minkowski', p=2)\nknn.fit(X_train, y_train.ravel())\n#test\ny_pred_knn = knn.predict(X_test)\ny_prob_knn = knn.predict_proba(X_test)\n\nevaluate_model(y_test, y_pred_knn, y_prob_knn[:, [1]], 'KNN (n=10)')","metadata":{"execution":{"iopub.status.busy":"2021-10-11T03:00:21.157068Z","iopub.execute_input":"2021-10-11T03:00:21.157454Z","iopub.status.idle":"2021-10-11T03:00:28.926724Z","shell.execute_reply.started":"2021-10-11T03:00:21.157393Z","shell.execute_reply":"2021-10-11T03:00:28.926043Z"},"trusted":true},"execution_count":45,"outputs":[]},{"cell_type":"markdown","source":"<h2>Manhattan</h2>\n<h4>Neighbours=10</h4>","metadata":{}},{"cell_type":"code","source":"#KNN Manhattan, Neighbours = 10\nfrom sklearn.neighbors import KNeighborsClassifier\n#train\nknn = KNeighborsClassifier(n_neighbors=10, metric= 'minkowski', p=1)\nknn.fit(X_train, y_train.ravel())\n#test\ny_pred_knn = knn.predict(X_test)\ny_prob_knn = knn.predict_proba(X_test)\n\nevaluate_model(y_test, y_pred_knn, y_prob_knn[:, [1]], 'KNN (n=10)')","metadata":{"execution":{"iopub.status.busy":"2021-10-11T03:00:28.928289Z","iopub.execute_input":"2021-10-11T03:00:28.929034Z","iopub.status.idle":"2021-10-11T03:00:38.704165Z","shell.execute_reply.started":"2021-10-11T03:00:28.928962Z","shell.execute_reply":"2021-10-11T03:00:38.703159Z"},"trusted":true},"execution_count":46,"outputs":[]},{"cell_type":"markdown","source":"<h2>Minkowski Power=3</h2>\n<h4>Neighbours=10</h4>","metadata":{}},{"cell_type":"code","source":"#KNN Minkowski Power = 3 , Neighbours = 10\nfrom sklearn.neighbors import KNeighborsClassifier\n#train\nknn = KNeighborsClassifier(n_neighbors=10, metric= 'minkowski', p=3)\nknn.fit(X_train, y_train.ravel())\n#test\ny_pred_knn = knn.predict(X_test)\ny_prob_knn = knn.predict_proba(X_test)\n\nevaluate_model(y_test, y_pred_knn, y_prob_knn[:, [1]], 'KNN (n=10)')","metadata":{"execution":{"iopub.status.busy":"2021-10-11T03:00:38.705799Z","iopub.execute_input":"2021-10-11T03:00:38.706121Z","iopub.status.idle":"2021-10-11T03:01:19.809798Z","shell.execute_reply.started":"2021-10-11T03:00:38.706067Z","shell.execute_reply":"2021-10-11T03:01:19.808689Z"},"trusted":true},"execution_count":47,"outputs":[]},{"cell_type":"markdown","source":"<h2>Minkowski Power=3</h2>\n<h4>Neighbours=20</h4>","metadata":{}},{"cell_type":"code","source":"#KNN Minkowski Power = 3 , Neighbours = 20\nfrom sklearn.neighbors import KNeighborsClassifier\n#train\nknn = KNeighborsClassifier(n_neighbors=20, metric= 'minkowski', p=3)\nknn.fit(X_train, y_train.ravel())\n#test\ny_pred_knn = knn.predict(X_test)\ny_prob_knn = knn.predict_proba(X_test)\n\nevaluate_model(y_test, y_pred_knn, y_prob_knn[:, [1]], 'KNN (n=20)')","metadata":{"execution":{"iopub.status.busy":"2021-10-11T03:01:19.813748Z","iopub.execute_input":"2021-10-11T03:01:19.814040Z","iopub.status.idle":"2021-10-11T03:02:11.623111Z","shell.execute_reply.started":"2021-10-11T03:01:19.813989Z","shell.execute_reply":"2021-10-11T03:02:11.621820Z"},"trusted":true},"execution_count":48,"outputs":[]},{"cell_type":"markdown","source":"<h2>Euclidean</h2>\n<h4>Neighbours=20</h4>","metadata":{}},{"cell_type":"code","source":"#KNN Euclidean , Neighbours = 20\nfrom sklearn.neighbors import KNeighborsClassifier\n#train\nknn = KNeighborsClassifier(n_neighbors=20, metric= 'minkowski', p=2)\nknn.fit(X_train, y_train.ravel())\n#test\ny_pred_knn = knn.predict(X_test)\ny_prob_knn = knn.predict_proba(X_test)\n\nevaluate_model(y_test, y_pred_knn, y_prob_knn[:, [1]], 'KNN (n=20)')","metadata":{"execution":{"iopub.status.busy":"2021-10-11T03:02:11.625453Z","iopub.execute_input":"2021-10-11T03:02:11.625868Z","iopub.status.idle":"2021-10-11T03:03:03.356320Z","shell.execute_reply.started":"2021-10-11T03:02:11.625807Z","shell.execute_reply":"2021-10-11T03:03:03.354806Z"},"trusted":true},"execution_count":49,"outputs":[]},{"cell_type":"markdown","source":"<h2>Manhattan</h2>\n<h4>Neighbours=20</h4>","metadata":{}},{"cell_type":"code","source":"#KNN Manhattan , Neighbours = 20\nfrom sklearn.neighbors import KNeighborsClassifier\n#train\nknn = KNeighborsClassifier(n_neighbors=20, metric= 'minkowski', p=1)\nknn.fit(X_train, y_train.ravel())\n#test\ny_pred_knn = knn.predict(X_test)\ny_prob_knn = knn.predict_proba(X_test)\n\nevaluate_model(y_test, y_pred_knn, y_prob_knn[:, [1]], 'KNN (n=20)')","metadata":{"execution":{"iopub.status.busy":"2021-10-11T03:40:28.167242Z","iopub.execute_input":"2021-10-11T03:40:28.168388Z","iopub.status.idle":"2021-10-11T03:40:39.338342Z","shell.execute_reply.started":"2021-10-11T03:40:28.168320Z","shell.execute_reply":"2021-10-11T03:40:39.336867Z"},"trusted":true},"execution_count":58,"outputs":[]},{"cell_type":"markdown","source":"<h2>Minkowski Power=3</h2>\n<h4>Neighbours=25</h4>","metadata":{}},{"cell_type":"code","source":"#KNN Minkowski Power = 3 , Neighbours = 25\nfrom sklearn.neighbors import KNeighborsClassifier\n#train\nknn = KNeighborsClassifier(n_neighbors=25, metric= 'minkowski', p=3)\nknn.fit(X_train, y_train.ravel())\n#test\ny_pred_knn = knn.predict(X_test)\ny_prob_knn = knn.predict_proba(X_test)\n\nevaluate_model(y_test, y_pred_knn, y_prob_knn[:, [1]], 'KNN (n=25)')","metadata":{"execution":{"iopub.status.busy":"2021-10-11T03:03:54.757764Z","iopub.execute_input":"2021-10-11T03:03:54.758327Z","iopub.status.idle":"2021-10-11T03:04:51.212073Z","shell.execute_reply.started":"2021-10-11T03:03:54.758242Z","shell.execute_reply":"2021-10-11T03:04:51.210713Z"},"trusted":true},"execution_count":51,"outputs":[]},{"cell_type":"markdown","source":"<h2>Euclidean</h2>\n<h4>Neighbours=25</h4>","metadata":{}},{"cell_type":"code","source":"#KNN Euclidean , Neighbours = 25\nfrom sklearn.neighbors import KNeighborsClassifier\n#train\nknn = KNeighborsClassifier(n_neighbors=25, metric= 'minkowski', p=2)\nknn.fit(X_train, y_train.ravel())\n#test\ny_pred_knn = knn.predict(X_test)\ny_prob_knn = knn.predict_proba(X_test)\n\nevaluate_model(y_test, y_pred_knn, y_prob_knn[:, [1]], 'KNN (n=25)')","metadata":{"execution":{"iopub.status.busy":"2021-10-11T03:04:51.213886Z","iopub.execute_input":"2021-10-11T03:04:51.214286Z","iopub.status.idle":"2021-10-11T03:05:00.591530Z","shell.execute_reply.started":"2021-10-11T03:04:51.214229Z","shell.execute_reply":"2021-10-11T03:05:00.590014Z"},"trusted":true},"execution_count":52,"outputs":[]},{"cell_type":"markdown","source":"<h2>Manhattan</h2>\n<h4>Neighbours=25</h4>","metadata":{}},{"cell_type":"code","source":"#KNN Manhattan , Neighbours = 25\nfrom sklearn.neighbors import KNeighborsClassifier\n#train\nknn = KNeighborsClassifier(n_neighbors=25, metric= 'minkowski', p=1)\nknn.fit(X_train, y_train.ravel())\n#test\ny_pred_knn = knn.predict(X_test)\ny_prob_knn = knn.predict_proba(X_test)\n\nevaluate_model(y_test, y_pred_knn, y_prob_knn[:, [1]], 'KNN (n=25)')","metadata":{"execution":{"iopub.status.busy":"2021-10-11T03:05:00.593432Z","iopub.execute_input":"2021-10-11T03:05:00.593871Z","iopub.status.idle":"2021-10-11T03:05:12.143072Z","shell.execute_reply.started":"2021-10-11T03:05:00.593811Z","shell.execute_reply":"2021-10-11T03:05:12.141718Z"},"trusted":true},"execution_count":53,"outputs":[]},{"cell_type":"markdown","source":"<h2>Minkowski Power=3</h2>\n<h4>Neighbours=50</h4>","metadata":{}},{"cell_type":"code","source":"#KNN Minkowski Power = 3 , Neighbours = 50\nfrom sklearn.neighbors import KNeighborsClassifier\n#train\nknn = KNeighborsClassifier(n_neighbors=50, metric= 'minkowski', p=3)\nknn.fit(X_train, y_train.ravel())\n#test\ny_pred_knn = knn.predict(X_test)\ny_prob_knn = knn.predict_proba(X_test)\n\nevaluate_model(y_test, y_pred_knn, y_prob_knn[:, [1]], 'KNN (n=50)')","metadata":{"execution":{"iopub.status.busy":"2021-10-11T03:05:12.145360Z","iopub.execute_input":"2021-10-11T03:05:12.146000Z","iopub.status.idle":"2021-10-11T03:06:33.280365Z","shell.execute_reply.started":"2021-10-11T03:05:12.145737Z","shell.execute_reply":"2021-10-11T03:06:33.279108Z"},"trusted":true},"execution_count":54,"outputs":[]},{"cell_type":"markdown","source":"<h2>Euclidean</h2>\n<h4>Neighbours=50</h4>","metadata":{}},{"cell_type":"code","source":"#KNN Euclidean , Neighbours = 50\nfrom sklearn.neighbors import KNeighborsClassifier\n#train\nknn = KNeighborsClassifier(n_neighbors=50, metric= 'minkowski', p=2)\nknn.fit(X_train, y_train.ravel())\n#test\ny_pred_knn = knn.predict(X_test)\ny_prob_knn = knn.predict_proba(X_test)\n\nevaluate_model(y_test, y_pred_knn, y_prob_knn[:, [1]], 'KNN (n=50)')","metadata":{"execution":{"iopub.status.busy":"2021-10-11T03:06:33.282177Z","iopub.execute_input":"2021-10-11T03:06:33.282540Z","iopub.status.idle":"2021-10-11T03:06:44.895094Z","shell.execute_reply.started":"2021-10-11T03:06:33.282483Z","shell.execute_reply":"2021-10-11T03:06:44.893712Z"},"trusted":true},"execution_count":55,"outputs":[]},{"cell_type":"markdown","source":"<h2>Manhattan</h2>\n<h4>Neighbours=50</h4>","metadata":{}},{"cell_type":"code","source":"#KNN Manhattan , Neighbours = 50\nfrom sklearn.neighbors import KNeighborsClassifier\n#train\nknn = KNeighborsClassifier(n_neighbors=25, metric= 'minkowski', p=1)\nknn.fit(X_train, y_train.ravel())\n#test\ny_pred_knn = knn.predict(X_test)\ny_prob_knn = knn.predict_proba(X_test)\n\nevaluate_model(y_test, y_pred_knn, y_prob_knn[:, [1]], 'KNN (n=50)')","metadata":{"execution":{"iopub.status.busy":"2021-10-11T03:06:44.897081Z","iopub.execute_input":"2021-10-11T03:06:44.897502Z","iopub.status.idle":"2021-10-11T03:06:56.277094Z","shell.execute_reply.started":"2021-10-11T03:06:44.897421Z","shell.execute_reply":"2021-10-11T03:06:56.275636Z"},"trusted":true},"execution_count":56,"outputs":[]},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(solver='lbfgs')\n#note y_train.ravel()\nlr.fit(X_train, y_train.ravel())\ny_pred_lr = lr.predict(X_test)\ny_score_lr = lr.decision_function(X_test)\ny_prob_lr = lr.predict_proba(X_test)\n\nevaluate_model(y_test, y_pred_lr, y_prob_lr[:,[1]], 'Logistic Regression')","metadata":{"_uuid":"be399739-d124-42ee-8787-cf63c1adfca6","_cell_guid":"689fb3d6-c4fd-439a-995d-3c035afd7dd8","execution":{"iopub.status.busy":"2021-10-11T03:06:56.279002Z","iopub.execute_input":"2021-10-11T03:06:56.279436Z","iopub.status.idle":"2021-10-11T03:07:08.910988Z","shell.execute_reply.started":"2021-10-11T03:06:56.279373Z","shell.execute_reply":"2021-10-11T03:07:08.909730Z"},"trusted":true},"execution_count":57,"outputs":[]}]}